import PySimpleGUI as sg
import pyautogui

def keyboard():
    layout=[[sg.Button(' 1 ',font=('Pricedown',25),button_color=("white","black"),mouseover_colors=("yellow","red"))]+[sg.Button(' 2 ',font=('Pricedown',25),button_color=("white","black"),mouseover_colors=("yellow","red"))]+[sg.Button(' 3 ',font=('Pricedown',25),button_color=("white","black"),mouseover_colors=("yellow","red"))]+[sg.Button(' 4 ',font=('Pricedown',25),button_color=("white","black"),mouseover_colors=("yellow","red"))]+[sg.Button(' 5 ',font=('Pricedown',25),button_color=("white","black"),mouseover_colors=("yellow","red"))]+[sg.Button(' 6 ',font=('Pricedown',25),button_color=("white","black"),mouseover_colors=("yellow","red"))]+[sg.Button(' 7 ',font=('Pricedown',25),button_color=("white","black"),mouseover_colors=("yellow","red"))]+[sg.Button(' 8 ',font=('Pricedown',25),button_color=("white","black"),mouseover_colors=("yellow","red"))]+[sg.Button(' 9 ',font=('Pricedown',25),button_color=("white","black"),mouseover_colors=("yellow","red"))]+[sg.Button(' 0 ',font=('Pricedown',25),button_color=("white","black"),mouseover_colors=("yellow","red"))],[sg.Text("",background_color="black")],
            [sg.Button(' Q ',font=('Pricedown',25),button_color=("white","black"),mouseover_colors=("yellow","red"))]+[sg.Button(' W ',font=('Pricedown',25),button_color=("white","black"),mouseover_colors=("yellow","red"))]+[sg.Button(' E ',font=('Pricedown',25),button_color=("white","black"),mouseover_colors=("yellow","red"))]+[sg.Button(' R ',font=('Pricedown',25),button_color=("white","black"),mouseover_colors=("yellow","red"))]+[sg.Button(' T ',font=('Pricedown',25),button_color=("white","black"),mouseover_colors=("yellow","red"))]+[sg.Button(' Y ',font=('Pricedown',25),button_color=("white","black"),mouseover_colors=("yellow","red"))]+[sg.Button(' U ',font=('Pricedown',25),button_color=("white","black"),mouseover_colors=("yellow","red"))]+[sg.Button(' I ',font=('Pricedown',25),button_color=("white","black"),mouseover_colors=("yellow","red"))]+[sg.Button(' O ',font=('Pricedown',25),button_color=("white","black"),mouseover_colors=("yellow","red"))]+[sg.Button(' P ',font=('Pricedown',25),button_color=("white","black"),mouseover_colors=("yellow","red"))],
            [sg.Button(' A ',font=('Pricedown',25),button_color=("white","black"),mouseover_colors=("yellow","red"))]+[sg.Button(' S ',font=('Pricedown',25),button_color=("white","black"),mouseover_colors=("yellow","red"))]+[sg.Button(' D ',font=('Pricedown',25),button_color=("white","black"),mouseover_colors=("yellow","red"))]+[sg.Button(' F ',font=('Pricedown',25),button_color=("white","black"),mouseover_colors=("yellow","red"))]+[sg.Button(' G ',font=('Pricedown',25),button_color=("white","black"),mouseover_colors=("yellow","red"))]+[sg.Button(' H ',font=('Pricedown',25),button_color=("white","black"),mouseover_colors=("yellow","red"))]+[sg.Button(' J ',font=('Pricedown',25),button_color=("white","black"),mouseover_colors=("yellow","red"))]+[sg.Button(' K ',font=('Pricedown',25),button_color=("white","black"),mouseover_colors=("yellow","red"))]+[sg.Button(' L ',font=('Pricedown',25),button_color=("white","black"),mouseover_colors=("yellow","red"))],
            [sg.Button(' Z ',font=('Pricedown',25),button_color=("white","black"),mouseover_colors=("yellow","red"))]+[sg.Button(' X ',font=('Pricedown',25),button_color=("white","black"),mouseover_colors=("yellow","red"))]+[sg.Button(' C ',font=('Pricedown',25),button_color=("white","black"),mouseover_colors=("yellow","red"))]+[sg.Button(' V ',font=('Pricedown',25),button_color=("white","black"),mouseover_colors=("yellow","red"))]+[sg.Button(' B ',font=('Pricedown',25),button_color=("white","black"),mouseover_colors=("yellow","red"))]+[sg.Button(' N ',font=('Pricedown',25),button_color=("white","black"),mouseover_colors=("yellow","red"))]+[sg.Button(' M ',font=('Pricedown',25),button_color=("white","black"),mouseover_colors=("yellow","red"))]+[sg.Button(' ❮ ',font=('Pricedown',25),button_color=("white","black"),mouseover_colors=("yellow","red"))],
            [sg.Button("▲",font=('Pricedown',20),button_color=("white","black"),mouseover_colors=("green","yellow"))]+[sg.Button("\t"*5,font=('Pricedown',20),button_color=("white","black"),mouseover_colors=("yellow","red"))]+[sg.Button("▼",font=('Pricedown',20),button_color=("white","black"),mouseover_colors=("yellow","red"))]]
    window=sg.Window("kb",layout,no_titlebar=True,element_justification="c",grab_anywhere=True,background_color='black').Finalize()
    window.TKroot.focus_force()
    caps=False
    ch={" 1 ":"!"," 2 ":"@"," 3 ":"#"," 4 ":"$"," 5 ":"%"," 6 ":"?"," 7 ":"&"," 8 ":"*"," 9 ":"("," 0 ":")"}
    ch_r={'!': ' 1 ', '@': ' 2 ', '#': ' 3 ', '$': ' 4 ', '%': ' 5 ', '?': ' 6 ', '&': ' 7 ', '*': ' 8 ', '(': ' 9 ', ')': ' 0 '}
    while True:
        event,values=window.read()
        if event=="▼":
            window.close()
            break
        elif event=="▲":
            if caps==False:
                window.find_element("▲").Update(button_color=("green","yellow"))
                for i in ch:
                    window.find_element(i).Update(" "+ch[i]+" ")
                caps=True
            else:
                window.find_element("▲").Update(button_color=("white","black"))
                for i in ch_r:
                    window.find_element(ch_r[i]).Update(ch_r[i])
                caps=False
        elif event==" ❮ ":
            pyautogui.hotkey("backspace")
        elif event=="\t"*5:
            pyautogui.hotkey("space")
        else:
            if caps==False:
                pyautogui.hotkey(event.strip().lower())
            else:
                if event in ch:
                    pyautogui.hotkey(ch[event])
                else:
                    pyautogui.hotkey(event.strip())
icon = \
b'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'
menu_def = ['UNUSED', ['Open','Exit']]
tray = sg.SystemTray(menu=menu_def, data_base64=icon, tooltip=f'On-Screen Keyboard')
while True:
    event = tray.read()
    if event=="Open" or event=="__ACTIVATED__":
        tray.hide()
        keyboard()
        tray.UnHide()
    elif event=="Exit":
        tray.close()
        break
